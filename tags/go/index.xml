<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Niuhe&#39;s Blog</title>
    <link>https://blog.niuhemoon.win/tags/go/</link>
    <description>Recent content in Go on Niuhe&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.niuhemoon.win/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang限制函数同时调用次数</title>
      <link>https://blog.niuhemoon.win/posts/tech/golang-frequency-limit/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.niuhemoon.win/posts/tech/golang-frequency-limit/</guid>
      <description>使用select语句和带缓冲区的channel来控制函数并发执行次数 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) // cocurrency number of the do func const cnum = 3 func main() { var jobs = make(chan bool, cnum) for { for i := 0; i &amp;lt; 10; i++ { go frqLimit(do, jobs, i) } time.Sleep(4e9) } } func frqLimit(f func(), jobChan chan bool, i int) { select { case jobChan &amp;lt;- true: f() &amp;lt;-jobChan default: fmt.Println(&amp;#34;job channel is full. pass &amp;#34;, i) } fmt.Println(&amp;#34;jobs&amp;#34;, i, &amp;#34;exit&amp;#34;) } func do() { time.Sleep(3e9) fmt.Println(&amp;#34;job done&amp;#34;) }</description>
    </item>
    
    <item>
      <title>Go语言和Makefile</title>
      <link>https://blog.niuhemoon.win/posts/tech/golang-makefile/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.niuhemoon.win/posts/tech/golang-makefile/</guid>
      <description>Makefile基础和Golang的Makefile模板</description>
    </item>
    
  </channel>
</rss>
